CONTROLLING FORM VALUES FROM STATE
-Forms in React are straight forward and similar to regular HTML elements with some differences
-Though storing and handling form data is entirely new
-Controlled forms: form deriving its input values from state (good practice)
eg:
class Form extends Component {
  state = {
    firstName: 'Malind',
    lastName: 'Kowalski'
  }

  render() {
    return (
      <form>
        <input type='text' name='firstName' value={this.state.firstName} />
        <input type='text' name='lastName' value={this.state.lastName} />
      </form>
    )
  }
}
-This setup is half finished though, the display would not change and would only keep the same,
 default value of 'Malind' or 'Another Name'


UPDATING STATE VIA FORMS
-If state values change, React will re-render and input(s) will display the new state
-Want to fire setState every time the form changes
-Makes sense for the forms to display whatever changes are made via user
-React sets up an event listener for this purpose
eg:
<input type='text' id='firstName' onChange={event => this.handleFirstNameChange(event)} value={this.state.firstName} />
<input type='text' id='lastName' onChange={event => this.handleLastNameChange(event)} value={this.state.lastName} />

-onChange fires every time a value of input changes
-An anonymous function invoked, accepting event as its argument, then calls this.handleWhatever,
 then passing the event as an argument

 -Example of the anonymous functions
 eg:
 handleFirstNameChange = event => {
  this.setState({
    firstName: event.target.value
  })
 }

 handleLastNameChange = event => {
  this.setState({
    lastName: event.target.value
  })
 }
 *EVENT contains data about TARGET
 *TARGET(being an INPUT) has a VALUE attribute
 *VALUE attribute is equal of what's entered into INPUT
 *THIS IS NOT VALUE PROVIDED FROM STATE*
 *State is updated base on event.target.value
 *The new state values set are used to set VALUE attributes of input(s)


MORE ON FORMS
-For elements include: <input>, <textarea>, <select>, <form>, not always specifically <input>
Use specific prop to control value of inputs:
  -<input> & <textarea> use 'value'
  -<input type='checkbox'> & <input type='radio'> use 'checked'
  -<option> use 'selected'

Pass in 'onChange' to listen for changes to value of input


CONTROLLED VS UNCONTROLLED COMPONENTS
-React provides 2 methods of uncontrolled and controlled components to set and get values
-Check for 'value' or 'defaultValue' to check if component is controlled or uncontrolled:
  -value prop is controlled by React
  -no value prop means uncontrolled component
  -value and defaultValue are mutually exclusive, one or the other but cannot be both
  eg:
    Controlled value: faveColor: 'Yellow'
    Uncontrolled defaultValue: threeCount: default: 3 (example for function to increment upward by 3, starting count value at 3, 3 then 6 then 9, etc)


UNCONTROLLED COMPONENT
-Uncontrolled component's values are kept in the DOM itself, the form element has its own internal
state
-Use defaultValue prop to set initial value for element, can't use 'value' prop
-Not using state to explicitly store its value, component never update its value


CONTROLLED COMPONENT
-Controlled components explicitly set value of a component and update value in response to changes
*code along with react-forms-v*
