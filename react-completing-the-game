COMPLETING THE GAME
(Follow up from what-is-react and the TTT game)

LIFTING STATE UP
-To check for a winner, maintain the value of each 9 squares in one location
-Best approach is to store the Game's state in the Parent Board Component
-Board will be able to tell each Square what to display by passing a PROP

-Collect data from multiple Children, or have two Child Components communicate with each other
-Do this by declaring the Shared STATE in their Parent Component
-Parent Component can pass STATE back down to Children by using PROPS
-Doing so will keep Child Components in sync with each other and Parent Component

-Add constructor to Parent Component to set initial state
*Follow with react-ttt-app
-When filling the board later, it will look something like:

[
  'O', NULL, 'X',
  'X', 'X', 'O',
  'O', NULL, NULL
]

-Current Board renderSquare():
renderSquare(i) {
  return <Square value={i}/>;
}
*Beginning, value props passed down from Board to show numbers 0-8 in every Square
*Another previous step, numbers were replaces with an 'X' mark determined by the Square's own state
*Square currently ignores the value prop passed to it by Board

-Need to use prop passing mechanism again
-Modify Board to instruct each individual Square about its current value('X', 'O' or null)

(Right now all the squares just get X marked inside them)
-Need to change what happens when a Square is clicked
-Board will now maintain which squares are filled
-Need to create a way for Square to update the Board's state
-State is private therefore Board cannot update directly from Square
-Maintain Board's state privacy with a passed down function from Board to Square
-This function will get called when Square is clicked

Current Board's renderSquare()
eg:
renderSquare(i) {
  return (
    <Square
      value={this.state.squares[i]}
      onClick={() => this.handleClick(i)}
    />
  );
}
*Pass down 2 props from Board to Square: value and onClick
*onClick is a function that Square can call when clicked
*Makes the following changed to Square
  -Replace this.state.value with this.props.value in Square's render() method
  -Replace this.setState() with this.props.onClick() in Square's render() method
  -Delete constructor from Square because Square no longer keeps track of Game's state


SQUARE COMPONENT(current)
class Square extends React.Component {
  render() {
    return (
      <button
        className="square"
        onClick={() => this.props.onClick()}>
        {this.props.value}
      </button>
    );
  }
}
1. onCLick prop on built-in DOM <button> component tells React to set up a click event listener
2. When button is clicked, React will call onClick handler defined in Square's render() method
3. Event handler calls this.props.onCLick(), specified by Board
4. Board passed onClick={() => this.handleClick(i)} to Square, the Square calls this.handleClick(i)
5. Currently handleClick() isn't defined, therefore current code crashes 
