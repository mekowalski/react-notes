COMPONENT LIFECYCLE
React components have 2 sets of properties: state and props
-Props are given to comp by its Parent, external influence that comp has no control over
eg: I have my dad's glossy, straight, black hair and facial features
-State can change in conjunction to props changing or when User interacts with comp
eg: My mood can change depending on my interactions with people or activities I engage in

-React framework was designed to enable creation of complex and highly reactive UI's
-The component lifecycles are divided into creation, updating and deletion
EXAMPLE:
  -open new chat window is creation
  -interacting and sending messages with chat window is updating
  -closing the chat window is deletion


LIFECYCLE HOOKS AND RENDERING
-Lifecycle hooks or methods are opportunities for changing how a component reacts to various changes
in the app
-A React component must be valid with 'render()'
-Lifecycle methods are called at different times of the component's lifecycle

PRE-MOUNTING
-Components at the core are simply JS classes
-Before Mounting begins, the class's constructor function is called
-Constructor isn't related to mounting to the DOM but it's useful for creating initial state
 for a component


MOUNTING
-When a component is initially created, it figures out its initial state and renders its initial
HTML onto the page
-componentWillMount: is called just before 'render()' used to change initial state if needed
-componentDid Mount: is called just after 'render()' used to set up long-running processes


UPDATING
-Choose from many lifecycle hooks to decide how React component will respond to changes
-componentWillReceiveProps: used to change components state based on new props passed in
-shouldComponentUpdate: invoked before component is re-rendered, compare old and new props/state
and prevent unnecessary re-renders
-componentWillUpdate called after 'shouldComponentUpdate' is finished and before new component gets
rendered, use to update integrations with 3rd party libraries
-componentDidUpdate: called after new component rendered, access to previous and current props/state,
and update 3rd party libraries if needed due to the re-render


UNMOUNTING
-componentWillUnmount: deletes and clears component from the page and is called right before
component deletes


BIG OAK TREE
-Tree is a parent component
-Each branch is a child component
-The leaves of each branch are more children
-Leaves go through lifecycles of creation, changing colors based on seasons and finally falling


COMMONLY USED LIFECYCLE METHODS
-render(): ONLY required method in a class component
-Should be pure, doesn't modify component state, returns the same result each time it's invoked and doesn't
 directly interact with browser
-If browser needs to be interacted with, do so in componentDidMount(), this keeps render() pure

-constructor(): React.Component subclass, that is called before being mounted
-Used for one, initialling state by assigning an object to this.state
-Also used to bind event handler methods to an instance
-Do no call setState() in constructor(), instead assign initial state to this.state directly in constructor
-All other methods will use this.setState to update state
-Avoid the common mistake of: copying props in to state
