PROPS ARE GOOD BECAUSE...
-State is bad(Somewhat, not really)
-Using state in React comps is necessary at times
-State has the ability to explicitly/reliably update component's features making it a powerful React
 feature
-Overall state creates complexity

-Often, an application needs state but the human brain struggled ti parse and track state

PROPS: provide a way to minmize  number of components in app that carry and manage state
-Also provides a method to reduce the total 'surface area' of the app that is 'stateful'
-Props are used to send down DATA, therefore pushing up STATE up, making STATE at the top of UI's
 hierarchy


USE-CASE PUSHING STATE UPWARDS
-Simple Fruit Basket app that tracks what's in the fruit basket and what's been eaten
-Two comps: FruitNotEaten & FruitEaten, each responsible for fetching its own list from app's backend
eg:
class FruitEaten extends Component {
  constructor(props) {
    super(props)

    this.state = {
      fruitList: []
    }
  }

  componentDidMount() {
    //Assume fetch function is a PROMISE that can go over the internet
    fetch('/api/fruit?eaten=true')
      .then(response => response.json())
      .then(fruitList => this.setState({ fruitList})
  }

  render() {
    return (
      <ul>
        {this.state.fruitList.map(fruit => <li key={fruit}>{fruit}</li>)}
      </ul>
    )
  }
}
*This comp fetches a list of already eaten fruit
*Then renders that list
*Main con is that this is only one implemented component
*FruitNotEaten comp still needs to be created to fetch and update its state
*THIS IS NOT DRY
*Already too much state in a small app here

MINIMIZE STATE WITH PROPS
-Both components (FruitNotEaten & FrutiEaten) are lists
-Both can be considered as one simple presentational component called FruitList
-Comp will know how to render a list of fruits
-This comp will then receive that list as a PROP!!!!!!
eg:
const FruitLists = props =>
  <ul>
    {props.fruitlist.map((fruit) => {
      return <li key={fruit}>{fruit}</li>
    })}
  </ul>
*Much simple are more stable
