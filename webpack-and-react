Webpack: allows combination of different files automatically
-Can freely import external JS code in JavaScript files


THE PROBLEM
-A server sending JS using webpage to browsers
-A script of animateDiv.js for browser to receive that itself makes use of jQuery
-First file sent to a requesting client(index.html)
eg: index.html
    <html>
      <head>
        <meta charset="utf-8">
        <script src="jquery.js"></script>
        <script src="animateDiv.js"></script>
        <title>Discotek</title>
      </head>
      <body>
        <div class="animat" onclick="animateDiv.js">
          I'm going to animate if you click me!
        </div>
      </body>
    </html>
*This approach makes 3 HTTP requests to the server
1. Hit base URL and returned to index.html file
2. index.html tells browser to request jquery.js from server
3. index.html tells browser to also request animateDiv.js from server

-Swifter way around this is to either combine JavaScript files into one file on the server
eg: index.html
    ...
    <script src="combinedJqueryAnimateDiv.js"></script>
    ...

-Or one step further and even in-line the JavaScript directly into HTML in a <script> tag, sending
 everything at once
eg: index.html
    ...
    <script>
      //all the contents of jquery.js and animateDiv.js
      //written here
    </script>
    ...

-Unfortunately this is not practical, combining JS code from multiple files into one
-Webpack: intelligently packages the JS code and sends it to the client over the internet
eg:
  1. siliconOverlord.js has space-age AI code
  2. enslaveHumanity.js wants to make use of other file and send it to browsers all over the internet
  3. Webpack pre-bundles both files together to sent once

-Webpack will check every file of a React application for dependencies that needs to be imported
-The end result is one big JS file including all the code, including dependencies
-Meaning a single transfer of a single thins to client when asked for React apps


SIMPLIFIED WEBPACK EXAMPLE
-Files needed to constitute a whole web application
eg:
  reveal.js(pre Webpack)
  function reveal(dog, realId) {
    dog.identity = realId
  }

  export default reveal

  main.js(pre Webpack)
  import reveal from './reveal.js'

  const goodDog = {
    name: 'Caroga Dog',
    identity: 'Sweet Pibull/Chocolate Lab, waggy tail, dog in the Kowalski house'
  }

  reveal(goodDog, 'Best Dog')

*Without Webpack, both files would need to be sent to client to ensure they are working well together
*Instead of writing custom, bespoke, effective solution, Webpack will come to the rescue


UNLEASHING WEBPACK ON FILES
eg: bundle.js(post Webpack)
    function reveal(dog, realId) {
      dog.identity = realId
    }

    const goodDog = {
      name: 'Caroga Dog',
      identity: 'Sweet Pibull/Chocolate Lab, waggy tail, dog in the Kowalski house'
    }

    reveal(goodDog, 'Best Dog')

*Single, all-encompassing file ensuring dependencies are right where they belong
*Webpack: Manages pesky dependency loading by pre-digesting many files' code & outputting a single 'bundle'
