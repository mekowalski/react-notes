-React has its own event system for handling called SyntheticEvent
-Having a specific event system instead of using native events is cross-browser compatibility
-Important to keep in mind that they are the exact same events, just implemented more consistently
-These events also have methods like preventDefault() and stopPropagation(), etc


HOW TO ADD EVENT HANDLERS
Example:
class Tickler extends React.Component {

  tickle = () => { //binding tickle() using arrow function to avoid creating new scope
    console.log('Tee hee!');
  }

  render() {
    return (
      <button>Tickle me!</button>
    );
  }
}
*no way to trigger tickle() function, therefore add an event handler to it, attach handler to
element much like adding to prop*

-Always compromised of 'on' and the event name itself (click or submit, etc)
eg: <button onClick={this.tickle}>Tickle me!</button>

-Added this event handler to an element, similar to adding a prop
eg:
class Tickler extends React.Component {
  //code here

  render() {
    return (
      <button onClick={this.tickle}>Tickle me!</button>
    );
  }
}

-Passing a function reference, not executing the tickle function
-L11: NOT required, all methods in React component always use THIS one way or another

-With React, it is typically needed to bind the methods passed to other components
  eg: L34 passes `this.tickle` therefore bind it

-It is unnecessary however, to bind render() or lifecycle methods because those are NOT passed to
 other components
