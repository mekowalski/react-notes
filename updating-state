Real power is in updating state
-If state doesn't need updating then the component shouldn't have any state
-State is reserved for data that CHANGES in component and visible in the UI

Use this.setState(), available to all React components instead of directly modifying with this.state
-Component should re-render because its state has changed and its UI like will change

*code along in react-updating-state*
*refer to scr/components/ClickityClick.js*
*refer to src/index.js*

class ClickityClick extends React.Component {
  constructor() {
    super()

    //define initial state
    this.state = {
      hasBeenClicked: false,
      currentTheme: 'blue'
    }
  }

-To update state, use this.setState()
//update state here
handleClick = () => {
  this.setState({
    hasBeenClicked: true
  })
}


HOW STATE GETS MERGED
-Object will get merged with the current state when using this.setState() and passing in an object,
 once state updates, component re-renders automatically
-Before merge
eg:
{
  hasBeenClicked: false,
  currentTheme: 'blue'
}

-After merge
eg:
{
  hasBeenClicked: true,
  currentTheme: 'blue'
}

-State only merges on the first level
-A state will be merged but any objects get overwritten, because it doesn't deeply merge with the object
 passed into this.setState()
 eg:
 {
  theme: 'blue',
  addressInfo: {
    street: null,
    number: null,
    city: null,
    country: null
  },
}

-Update addressInfo.city
this.setState({
  addressInfo: {
    city: 'New York City'
  }
})

-Following result shape
{
  theme: 'blue',
  addressInfo: {
    city: 'New York City',
  },
}

-A deep merge happens recursively, leaving any unchanged properties intact
-Object.assign() merges the object with the new Data



SETTING STATE IS NOT SYNCHRONOUS
-It may seem that setting state is synchronous because it updates right away but it is NOT synchronous
-State changes happen asynchronously although they appear to instantly update


STATE CHANGES VS PROPS CHANGES
-State and Props changes will both trigger re-render in React component
-State changes though, will only happen internally due to components changing their own state
-Props changes occur eternally due to changes in the prop values being passed in
