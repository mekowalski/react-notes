Real power is in updating state
-If state doesn't need updating then the component shouldn't have any state
-State is reserved for data that CHANGES in component and visible in the UI

Use this.setState(), available to all React components instead of directly modifying with this.state
-Component should re-render because its state has changed and its UI like will change

*code along in react-updating-state*
*refer to scr/components/ClickityClick.js*
*refer to src/index.js*

class ClickityClick extends React.Component {
  constructor() {
    super()

    //define initial state
    this.state = {
      hasBeenClicked: false,
      currentTheme: 'blue'
    }
  }

-To update state, use this.setState()
//update state here
handleClick = () => {
  this.setState({
    hasBeenClicked: true
  })
}


HOW STATE GETS MERGED
-Object will get merged with the current state when using this.setState() and passing in an object,
 once state updates, component re-renders automatically
-Before merge
eg:
{
  hasBeenClicked: false,
  currentTheme: 'blue'
}

-After merge
eg:
{
  hasBeenClicked: true,
  currentTheme: 'blue'
}

-State only merges on the first level
-A state will be merged but any objects get overwritten, because it doesn't deeply merge with the object
 passed into this.setState()
 eg:
 {
  theme: 'blue',
  addressInfo: {
    street: null,
    number: null,
    city: null,
    country: null
  },
}

-Update addressInfo.city
this.setState({
  addressInfo: {
    city: 'New York City'
  }
})

-Following result shape
{
  theme: 'blue',
  addressInfo: {
    city: 'New York City',
  },
}

-A deep merge happens recursively, leaving any unchanged properties intact
-Object.assign() merges the object with the new Data
eg:
this.setState({
  addressInfo: Object.assign({}, this.state.addressInfo, {
    city: 'New York City'
  })
})

-Spread operator (...this.state.whateverObject)
eg:
this.setState({
  addressInfo: {
    ...this.state.addressInfo,
    city: 'New York City'
  }
})

-Both Object.assign() and Spread Op result in proper updated state
{
 theme: 'blue',
 addressInfo: {
   street: null,
   number: null,
   city: 'New York City',
   country: null
 },
}


SETTING STATE IS NOT SYNCHRONOUS
-It may seem that setting state is synchronous because it updates right away but it is NOT synchronous
-State changes happen asynchronously although they appear to instantly update whenever React feels it's
 appropriate, which may result in unexpected behavior
eg:
handleClick = () => {
  this.setState({
    hasBeenClicked: true
  })
  console.log(this.state.hasBeenClicked); // prints false
}

-To access new state after it's update, optionally add callback as 2nd arg to this.setState()
eg:
handleClick = () => {
  this.setState({
    hasBeenClicked: true
  }, () => console.log(this.state.hasBeenClicked)) // prints true, 2nd arg of setState()
}


STATE CHANGES VS PROPS CHANGES
-State and Props changes will BOTH trigger re-render in React component
-State changes though, will only happen INTERNALLY due to components changing their own state
-Props changes occur eternally due to changes in the prop values being passed in


WHAT DOES SETSTATE DO?
-setState schedules an update to a component's state object, when state changes, the component re-renders
-setState is asynchronous inside event handlers

STATE VS PROPS
-Both are plain JavaScript objects
-Both hold information that influences the output of render
-Props get passed TO the component(similar to function params)
-State is managed WITHIN the component(similar to variables declared within a function)

HOW TO UPDATE STATE VALUES DEPENDENT ON CURRENT STATE
-Pass function instead of an object to setState to ensure the call always uses the most updated version
 of state

WHY DOESN'T REACT UPDATE THIS.STATE SYNCHRONOUSLY?
-React purposefully waits until all components call setState() in handlers before re-render
-Two main reasons React doesn't just update this.state immediately without re-render
  1. Consistency between props and state would break, causing issues that are difficult to debug
  2. Some new features being worked on would be impossible to implement
